ifndef VERBOSE
MAKEFLAGS += --no-print-directory
endif
base_dir:=$(shell readlink -f .)

PYTHONPATH_ORIG:=$(PYTHONPATH)
export PYTHONPATH=$(base_dir)/lib:$(PYTHONPATH_OTHER):$(PYTHONPATH_ORIG)
PYTHON_BIN:=$(shell which $(PYTHON) | head -1)
VENV_OPTS=--clear
# OSX HAS WRECKED brew python3.*:
#VENV_OPTS+=--copies

BIN_DIRS+=bin
BIN_FILES:=$(shell grep -Erl '^\#!.+python' $(BIN_DIRS) 2>/dev/null)
LIB_DIRS+=lib
LIB_FILES:=$(shell find $(LIB_DIRS) -name '*.py' | grep -Ev '_test\.py$$' | sort)
TEST_DIRS+=lib
TEST_FILES:=$(shell find $(TEST_DIRS) -name '*.py' | grep -E '_test\.py$$' | sort)
LINT_FILES:=$(BIN_FILES) $(LIB_FILES) $(TEST_FILES)
MYPY_FILES:=$(shell grep -Elr '^ *from typing import ' $(LINT_FILES))
REQUIREMENTS_TXT:=$(wildcard *requirements.txt)

default : all

all : check

# Environment:

venv: venv/bin/activate

venv/bin/activate: $(REQUIREMENTS_TXT)
	$(MAKE) venv-create venv-upgrade-tools venv-install-requirements

venv-create:
	which $(PYTHON) ;\
	env | grep -E 'LD_|PATH' ;\
	$(PYTHON) --version
	$(PYTHON_BIN) -m venv $(VENV_OPTS) ./venv
	. venv/bin/activate ;\
	env | grep -E 'LD_|PATH' ;\
	which $(PYTHON) ;\
	$(PYTHON) --version
# pip+3.10: SO MANY BUGS...
# https://stackoverflow.com/questions/72439001/there-was-an-error-checking-the-latest-version-of-pip

venv-upgrade-tools:
	- set -x ;\
	$(PYTHON) -m pip install --upgrade pip ;\
	. venv/bin/activate ;\
	which $(PYTHON) ;\
	pip install --upgrade pip ;\
	pip install --upgrade setuptools ;\
	pip install --upgrade distlib ;\
	$(MAKE) venv-install-requirements

venv-install-requirements: $(REQUIREMENTS_TXT)
	. venv/bin/activate ;\
	$(MAKE) install-requirements

venv-force:
	rm -rf venv/
	$(MAKE) venv

install-requirements: $(REQUIREMENTS_TXT)
	$(PYTHON) -m pip install $(foreach txt,$(REQUIREMENTS_TXT), -r $(txt))

.PHONY: venv venv-create venv-upgrade-tools venv-force install-requirements

# Early:

early: resources

# Check:

check: early test lint typecheck

run-check: run-test run-lint run-typecheck

# Lint:

lint: early pylint pycodestyle

pylint:
	$(MAKE) run-pylint FILES='$(or $(FILES), $(LINT_FILES))'

pycodestyle:
	$(MAKE) run-pycodestyle FILES='$(or $(FILES), $(LINT_FILES))'

run-lint: run-pylint run-pycodestyle

run-pylint:
	pylint --rcfile ./.pylintrc --recursive=y $(wildcard $(FILES))

run-pycodestyle:
	pycodestyle --config=.pycodestyle --show-source --statistics $(wildcard $(FILES))

# Typecheck:

typing: typecheck
typecheck: stubgen
	mypy --install-types --non-interactive
	$(MAKE) run-$@ FILES='$(or $(FILES), $(MYPY_FILES))'

run-typecheck: stubgen mypy

mypy:
	$(MAKE) run-$@ FILES='$(or $(FILES), $(MYPY_FILES))'

MYPY_REPORT_DIR=mypy-report
MYPY_REPORTS=--txt-report --html-report --any-exprs-report
# MYPY_OPTS+= --verbose
MYPY_OPTS+= --config-file ./.mypy.ini
MYPY_OPTS+= --pretty --show-column-numbers
# MYPY_OPTS+= --strict
MYPY_OPTS+= --warn-redundant-casts
MYPY_OPTS+= $(foreach report,$(MYPY_REPORTS), $(report) $(MYPY_REPORT_DIR))
run-mypy:
	rm -rf mypy-report/
	mkdir -p mypy-report
	mypy $(MYPY_OPTS) $(wildcard $(or $(FILES), /dev/null))
	cat mypy-report/index.txt
#	-open

stubgen:
	@set -x; for d in $(DIRS_OTHER); do $(MAKE) -C "$$d" $@; done
	$(MAKE) run-$@

PYI_FILES=$(LIB_FILES:%.py=%.pyi)
run-stubgen: $(PYI_FILES)
.SUFFIXES: .pyi .py
%.pyi: %.py
	stubgen -o lib $(@:%.pyi=%.py)

# Unit Test:

test: early unit-test

unit-test:
	$(MAKE) run-test FILES='$(or $(FILES), $(TEST_FILES))'

PYTEST_OPTS= #--capture=fd --show-capture
PYTEST_OPTS= --capture=no
run-test:
	rm -rf coverage/
	mkdir -p coverage
	coverage run -m pytest $(PYTEST_OPTS) $(or $(wildcard $(FILES)), all) -vv -rpP
	coverage report | tee coverage/coverage.txt
	coverage html
	coverage json
#	coverage xml

# Resources:

MIN_JS_FILES:=$(patsubst %.js,%.min.js,$(JS_FILES))

resources: minify

minify: $(MIN_JS_FILES) Makefile
%.min.js: %.js
	python -mrjsmin < $< > $@
# slimit < $< > $@ # ModuleNotFoundError: No module named 'minifier'

minify-clean:
	rm -f $(MIN_JS_FILES)

# Productivity:

watch-files:
	tool/bin/watch-files

clean-requirements-txt:
	@set -xe; for f in *requirements.txt ;\
	do \
	  LC_ALL=C sort -u -o '$$f' '$$f' || exit $$? ;\
	done

clean:
	rm -rf ./__pycache__ ./.pytest_cache ./.mypy_cache ./mypy-report ./htmlcov coverage/
	find lib tests -name '__pycache__' -a -type d | sort -r | xargs rm -rf {}
	rm -f $(MIN_JS_FILES)
	find lib -name '*.pyi' -exec rm \{} \;

very-clean: clean
	rm -rf ./venv

# Diagnostics:

env:
	. venv/bin/activate; env | sort

var v:
	@$(foreach var,$(v),echo '$(var)=$($(var))';)

vars:
	@$(foreach v,BIN_FILES LIB_FILES TEST_FILES LINT_FILES MYPY_FILES,echo '$(v)=$($(v))'; )
